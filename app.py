from models import (Base, Product, session, engine)
import datetime
import csv
import time
import os.path

"""
TODO
Since inventory.db and backup.csv will be generated by the end-user as they interact with the app, both files should be removed before submitting your project. Ensure that the app still runs without these files.
"""


# Main menu options
def menu():
    while True:
        print('''
              \rPRODUCTS
              \r- Enter "v" to view the details of a product
              \r- Enter "a" to add a new product
              \r- Enter "b" to backup the entire contents of the database
              \r- Enter "e" to exit''')
        choice = (input('What would you like to do?  ')).lower()
        if choice in ['v', 'a', 'b', 'e']:
            return choice
        else:
            while input('''
                  \r‚ùóÔ∏èPlease choose one of the options above.‚ùóÔ∏è
                  \rInput "v", "a", "b", or "e"
                  \rPress ENTER to try again.''') != "":
                continue


# Format product_price for database
def clean_price(price_str):
    try:
        price_float = float(price_str.replace('$', ''))
    except ValueError:
        while input("""
              \n‚ùóÔ∏è***** PRICE ERROR *****‚ùóÔ∏è
              \rThe price should be a number without a currency symbol.
              \rEx: 10.99
              \rPress ENTER to try again.
              \r*************************""") != "":
            continue
    else:
        return int(price_float * 100)


# Format date_updated for database
def clean_date(date_str):
    try:
        split_date = date_str.split('/')
        return_date = datetime.date(
            int(split_date[2]), int(split_date[0]), int(split_date[1]))
    except (ValueError, IndexError):
        while input("""
              \n‚ùóÔ∏è***** DATE ERROR *****‚ùóÔ∏è
              \rThe date format should include a valid Month, Day, and Year from the past.
              \rEx: 1/13/2022
              \rPress ENTER to try again.
              \r*************************""") != "":
            continue
        return
    else:
        return return_date


# Format product_quantity for database
def clean_quantity(quantity_str):
    try:
        product_quantity = int(quantity_str)
    except ValueError:
        while input("""
              \n‚ùóÔ∏è***** QUANTITY ERROR *****‚ùóÔ∏è
              \rThe product quantity should be a valid number.
              \rPress ENTER to try again.
              \r*************************""") != "":
            continue
        return
    else:
        return product_quantity


# Add products in inventory.csv
def add_csv():
    with open('inventory.csv') as csvfile:
        data = csv.reader(csvfile)
        next(data)  # skip header row
        for row in data:
            product_in_db = session.query(Product).filter(
                Product.product_name == row[0]).one_or_none()
            if product_in_db == None:
                product_name = row[0]
                product_price = clean_price(row[1])
                product_quantity = int(row[2])
                date_updated = clean_date(row[3])
                new_product = Product(product_name=product_name, product_quantity=product_quantity,
                                      product_price=product_price, date_updated=date_updated)
                session.add(new_product)
        session.commit()


# Read products from the db
def read_db():
    products = []
    for product in session.query(Product):
        products.append({
            "id": product.product_id,
            "name": product.product_name,
            "price": product.product_price,
            "quantity": product.product_quantity,
            "date_updated": product.date_updated
        })
    return products


# Backup the database (Export new CSV)
def backup_db():
    products = read_db()
    if not os.path.exists('backup.csv'):
        writer = csv.writer(open('backup.csv', 'w'))
        writer.writerow(['product_name', 'product_price',
                        'product_quantity', 'date_updated'])
        for product in products:
            writer.writerow([product['name'], product['price'],
                            product['quantity'], product['date_updated']])
        print("\nDatabase backedup! ‚úÖ")
        time.sleep(1.5)
    else:
        with open('backup.csv') as csvfile:
            csv_data = csvfile.read()
            not_in_file = []
            for product in products:
                if product['name'] not in csv_data:
                    not_in_file.append(product)
            for item in not_in_file:
                writer = csv.writer(open('backup.csv', 'a'))
                writer.writerow([item['name'], item['price'],
                                 item['quantity'], item['date_updated']])
        print("\nDatabase backedup! ‚úÖ")
        time.sleep(1.5)


# Display products with their IDs
def prompt_ids():
    products = read_db()
    id_options = []
    for product in products:
        id_options.append(product['id'])
    while (see_ids := (input("\nWould you like to see all product IDs? (y/n)  ")).lower()) != "n":
        if see_ids == "y":
            for product in products:
                print(f"\n{product['id']}: {product['name']}")
            return id_options
        else:
            print('\n‚ùóÔ∏è Please enter either "y" or "n"')
    else:
        return id_options


# Get and display a product by its product_id
def view_product():
    products = read_db()
    valid_ids = prompt_ids()
    while True:
        try:
            id = int(input("\nPlease enter a product ID:  "))
            if id not in valid_ids:
                print(f'\n‚ùóÔ∏è {id} is not a valid product ID')
                prompt_ids()
        except ValueError as err:
            print(f'\n‚ùóÔ∏è That is not a valid ID\n({err})')
            prompt_ids()
            continue
        else:
            for product in products:
                if product['id'] == id:
                    print(f"""
                        \rName: {product['name']}
                        \rPrice: ${product['price'] / 100}
                        \rQuantity: {product['quantity']}
                        \rDate Updated: {product['date_updated']}
                        """)
                    time.sleep(1.5)
                    return


# Adding a product to the database
def add_product():
    pass
    # Add book
    product_name = input('\nProduct Name:  ')
    quantity_error = True
    while quantity_error:
        product_quantity = input('\nProduct Quantity:  ')
        product_quantity = clean_quantity(product_quantity)
        if type(product_quantity) == int:
            quantity_error = False
    price_error = True
    while price_error:
        product_price = input('\nPrice (Ex: 25.64):  ')
        product_price = clean_price(product_price)
        if type(product_price) == int:
            price_error = False
    date_error = True
    while date_error:
        date_updated = input('\nDate Updated (Ex: 10/25/2022):  ')
        date_updated = clean_date(date_updated)
        if type(date_updated) == datetime.date:
            date_error = False

    new_product = Product(product_name=product_name, product_quantity=product_quantity,
                          product_price=product_price, date_updated=date_updated)
    session.add(new_product)
    session.commit()
    print('\nProduct added! ‚úÖ')
    time.sleep(1.5)


def app():
    add_csv()
    app_running = True
    while app_running:
        choice = menu()
        if choice == "v":
            # View the details of a product
            view_product()
        elif choice == "a":
            # Add a new product
            add_product()
        elif choice == "b":
            # Backup the entire contents of the database
            backup_db()
        else:
            print("\nThank you for using the store inventory database.\nGoodbye üëã\n")
            app_running = False
            return


if __name__ == '__main__':
    Base.metadata.create_all(engine)  # Connect to the database
    app()
